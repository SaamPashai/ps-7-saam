{"version":3,"sources":["Projects.js","About.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Projects","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","d","setState","console","log","react_default","a","createElement","className","map","i","reactstrap_es","target","href","link","name","description","src","alt","Component","About","apply","arguments","Homepage","id","App","HashRouter","Fragment","Link","to","Route","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ceda0542.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { Card, Button, CardBody, CardTitle, CardText, Col } from 'reactstrap';\n\nexport class Projects extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n    componentDidMount() {\n        d3.csv('data/projects.csv').then((d) => {\n            this.setState({ data: d });\n        });\n    }\n    render() {\n        console.log(this.state.data)\n        return <div className=\"container\">\n            <h1>Projects</h1>\n            { /* Render a card for each element in your data */}\n            {this.state.data.map((d, i) => {\n                return (\n                    <Card key={\"project\" + i}>\n                        <CardBody>\n                            <CardTitle><a target=\"_blank\" href={d.link}>{d.name}</a></CardTitle>\n                            <CardText>{d.description}</CardText>\n                        </CardBody>\n                    </Card>\n                )\n            })}\n            <p className=\"cite\"> *The animation was not created by me. I got the code to do this from<a target=\"_\" href=\"https://codepen.io/JTParrett/pen/hktzu\">CodePen.</a></p>\n            <div className=\"cube\">\n                <img className=\"luigi\" src=\"https://vignette.wikia.nocookie.net/nintendo/images/e/ec/Paper_Luigi_2.png/revision/latest?cb=20171111011157&path-prefix=en\" alt=\"luigi\"></img>\n            </div>\n        </div>\n    }\n}","import React, { Component } from 'react';\nimport { Card, Button, CardBody, CardTitle, CardText, Col } from 'reactstrap';\n\nexport class About extends Component {\n    render() {\n        return(\n            <div>\n                <h1>About me</h1>\n                <p>My name is Saam Pashai and I am a senior in Informatics at UW.\n                    My interests in school include software development, project \n                    managment, and data science. \n                </p>\n                <p>\n                    I have interests out of school too. My favorite sports teams are:\n                    <ul>\n                        <li>Seattle Seahawks</li>\n                        <li><strike>Seattle Sonics</strike> <i>no longer a team tho :(</i></li>\n                        <li>Seattle Mariners</li>\n                        <li>Arsenal FC</li>\n                    </ul>\n                    Apart from sports, I really like animals, music, and yoga!\n                </p>\n                <p>\n                    My favorite animals:\n                    <div className=\"text-center\">\n                        <img className=\"animal\" src=\"https://polarbearsinternational.org/media/3269/mnm-1022.jpg\" alt=\"polarbear\"></img>\n                        <img className=\"animal\" src=\"https://media.mnn.com/assets/images/2018/02/AdorableBlackCatLookingAtCameraFromSofa.jpg.653x0_q80_crop-smart.jpg\" alt=\"cat\"></img>\n                        <img className=\"animal\" src=\"http://tigers.panda.org/wp-content/uploads/Image02-892x1024.jpg\" alt=\"tiger\"></img>\n                    </div>\n                    \n                </p>\n               \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nclass Homepage extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Welcome to my website</h1>\n                <p>The about page has information about me on it.\n                </p>\n                <p>The projects page has information about various \n                    projects I took part in. \n                </p>\n                <p>I hope you like what you see!</p>\n                <img id=\"all\" src=\"https://spaceplace.nasa.gov/review/sunburn/sunburn1.en.png\" alt=\"sun\"></img>\n            </div>\n        )\n    }\n}\n\nexport { Homepage };","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Projects } from \"./Projects\";\nimport { About } from \"./About\";\nimport { Homepage } from \"./Homepage\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <main>\n          <Router>\n            <React.Fragment>\n              <Link to=\"/\">Home</Link>\n              <Link to=\"/about\">About</Link>\n              <Link to=\"/projects\">Projects</Link>\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/projects\" component={Projects} />\n              <Route exact path=\"/\" component={Homepage} />\n            </React.Fragment>\n          </Router>\n          </main>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}